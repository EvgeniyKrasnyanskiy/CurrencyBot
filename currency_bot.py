import re
import json
import requests
import logging
import os
from bs4 import BeautifulSoup
import sys
import time
import psutil
import threading
from telegram.ext import Filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

LOCK_FILE = 'currency_bot.lock'
RESTART_FLAG_FILE = "restart.flag"
RESTART_BLOCKED_TIME = 660  # 11 –º–∏–Ω—É—Ç

if not os.path.exists('logs'):
    os.makedirs('logs')
LOG_FILE = os.path.join('logs', 'currency_bot.log')

logging.basicConfig(
    filename=LOG_FILE,
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

def load_env_config():
    admins_str = os.getenv('ADMINS', '[]')
    try:
        admins = json.loads(admins_str)
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ADMINS: {admins_str}")
        admins = []

    config = {
        'token': os.getenv('BOT_TOKEN'),
        'channel_id': os.getenv('CHANNEL_ID'),
        'topic_id': os.getenv('TOPIC_ID'),
        'admins': admins,
        'sleep_time': int(os.getenv('SLEEP_TIME', '600')),
        'cache_ttl': int(os.getenv('CACHE_TTL', '300'))
    }

    if not config['token']:
        raise ValueError("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
    if not config['channel_id']:
        raise ValueError("CHANNEL_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")

    return config

# --- –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_users():
    users_file = 'data/users.json'
    if not os.path.exists(users_file):
        return {}
    with open(users_file, 'r', encoding='utf-8-sig') as f:
        return json.load(f)

def save_users(users):
    users_file = 'data/users.json'
    os.makedirs('data', exist_ok=True)
    with open(users_file, 'w', encoding='utf-8-sig') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

# --- Lock-—Ñ–∞–π–ª ---
def is_our_bot(pid):
    try:
        proc = psutil.Process(pid)
        return "currency_bot.py" in ' '.join(proc.cmdline()).lower()
    except Exception:
        return False

def create_lock():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if os.path.exists(RESTART_FLAG_FILE):
        age = time.time() - os.path.getmtime(RESTART_FLAG_FILE)
        if age < RESTART_BLOCKED_TIME:
            remaining = int(RESTART_BLOCKED_TIME - age)
            print(f"‚è≥ –ë–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫.")
            sys.exit(1)

    if os.path.exists(LOCK_FILE):
        try:
            with open(LOCK_FILE, 'r') as f:
                existing_pid = int(f.read().strip())

            if psutil.pid_exists(existing_pid) and is_our_bot(existing_pid):
                logger.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID {existing_pid} ‚Äî —ç—Ç–æ currency_bot.py)")
                print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
                sys.exit(1)
            else:
                logger.warning(f"–ù–∞–π–¥–µ–Ω lock-—Ñ–∞–π–ª —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∏–ª–∏ —á—É–∂–∏–º PID {existing_pid}, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ lock-—Ñ–∞–π–ª–∞: {e}, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º")

    with open(LOCK_FILE, 'w') as f:
        f.write(str(os.getpid()))

def remove_lock():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    with open(RESTART_FLAG_FILE, 'w') as f:
        f.write(datetime.now().isoformat())

def parse_exchange_rate(urls, keywords):
    result_lines = []
    headers = {
        "User-Agent": "Mozilla/5.0"
    }

    for url in urls:
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            content_type = response.headers.get("Content-Type", "")
            domain = url.split("//")[1].split("/")[0]
            found = False

            # CoinGecko JSON
            if "application/json" in content_type:
                data = response.json()
                if "tether" in data and "rub" in data["tether"]:
                    rate = data["tether"]["rub"]
                    result_lines.insert(0, f"üè¶ CoinGecko: {rate}‚ÇΩ")
                else:
                    result_lines.append(f"‚ö†Ô∏è JSON –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É—Ä—Å: {url}")
                continue

            # HTML –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è OKX
            html = response.text
            if "okx.com" in domain:
                okx_patterns = [
                    r'‚ÇΩ\s*(\d+[.,]?\d*)',
                    r'(\d+[.,]?\d*)\s*‚ÇΩ',
                    r'USDT.*?(\d+[.,]?\d*)\s*RUB',
                    r'RUB.*?(\d+[.,]?\d*)\s*USDT'
                ]

                found_rates = []
                for pattern in okx_patterns:
                    matches = re.findall(pattern, html, re.IGNORECASE)
                    for match in matches:
                        try:
                            number = float(match.replace(",", "."))
                            if 70 < number < 85:
                                found_rates.append(number)
                        except ValueError:
                            continue

                if found_rates:
                    best_rate = sum(found_rates) / len(found_rates)
                    number_str = f"{best_rate:.2f}"
                    result_lines.insert(0, f"üí± OKX: {number_str}‚ÇΩ")
                    found = True
                continue

            # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if not found:
                for keyword in keywords:
                    pattern = re.compile(
                        rf'{re.escape(keyword)}[\s:<>\-/a-zA-Z"\'=]*?(\d+[.,]?\d*)',
                        re.IGNORECASE
                    )
                    match = pattern.search(html)
                    if match:
                        rate = match.group(1)
                        result_lines.append(f"üí¨ {keyword}: {rate}‚ÇΩ")
                        found = True
                        break

            # Fallback –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É ‚ÇΩ
            if not found and "okx.com" not in domain:
                soup = BeautifulSoup(html, 'html.parser')
                candidates = soup.find_all(string=re.compile(r'‚ÇΩ\s*\d+[.,]?\d*'))
                for s in candidates:
                    match = re.search(r'‚ÇΩ\s*(\d+[.,]?\d*)', s)
                    if match:
                        number = float(match.group(1).replace(",", "."))
                        if number > 20:
                            number_str = f"{number:.2f}"
                            result_lines.insert(0, f"üí± OKX: {number_str}‚ÇΩ")
                            found = True
                            break

            if not found:
                result_lines.append(f"‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {url}")

        except Exception as e:
            result_lines.append(f"‚ùå –û—à–∏–±–∫–∞ {url}: {e}")
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")

    usdt_CG = None
    usdt_OKX = None
    URL_CG = ""
    URL_OKX = ""

    for line in result_lines:
        if line.startswith("üè¶ CoinGecko:"):
            match = re.search(r"([\d.]+)", line)
            usdt_CG = match.group(1) if match else None
            URL_CG = next((url for url in urls if "coingecko.com" in url), "")
        elif line.startswith("üí± OKX:"):
            match = re.search(r"([\d.]+)", line)
            usdt_OKX = match.group(1) if match else None
            URL_OKX = next((url for url in urls if "okx.com" in url), "")

    timestamp = time.strftime("%H:%M", time.localtime())

    if usdt_CG and usdt_OKX:
        URL_CG = URL_CG.replace("(", "\\(").replace(")", "\\)")
        URL_OKX = URL_OKX.replace("(", "\\(").replace(")", "\\)")
        msg = (
            f"üíµ USDT = ‚ÇΩ{usdt_CG} ([CG]({URL_CG})) –∏ ‚ÇΩ{usdt_OKX} ([OKX]({URL_OKX})) {timestamp}"
        )
        return msg
    else:
        result_lines.append(timestamp)
        return "\n".join(result_lines)


# --- –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ ---
# –û–°–¢–ê–í–õ–ï–ù–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å)
class CurrencyBot:
    def __init__(self):
        try:
            self.last_rates = ""
            self.last_update_time = 0
            self.last_message_id = None
            self.bot_message_id = None

            print("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.env_config = load_env_config()
            self.users = load_users()
            print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

            self.token = self.env_config['token']
            self.channel_id = self.env_config['channel_id']
            self.topic_id = self.env_config['topic_id']
            self.admin_ids = self.env_config['admins']
            self.sleep_time = self.env_config['sleep_time']
            self.cache_ttl = self.env_config['cache_ttl']

            self.urls = [
                "https://www.okx.com/ru-eu/convert/usdt-to-rub",
                "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
            ]
            self.keywords = ["–°–µ–π—á–∞—Å USDT = "]

            print("–°–æ–∑–¥–∞–Ω–∏–µ Updater...")
            self.updater = Updater(token=self.token, use_context=True)
            self.dispatcher = self.updater.dispatcher

            print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞...")
            self.thread = threading.Thread(target=self.periodic_send)
            self.thread.daemon = False

            print("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            self.setup_handlers()
            print("CurrencyBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ CurrencyBot: {e}")
            import traceback
            traceback.print_exc()
            raise

    def setup_handlers(self):
        if self.dispatcher:
            self.dispatcher.add_handler(CommandHandler('start', self.cmd_start))
            self.dispatcher.add_handler(CommandHandler('get_rate', self.cmd_get_rate))
            self.dispatcher.add_handler(CommandHandler('setinterval', self.cmd_setinterval, filters=Filters.user(user_id=self.admin_ids)))
            self.dispatcher.add_handler(CommandHandler('users', self.cmd_users, filters=Filters.user(user_id=self.admin_ids)))
            self.dispatcher.add_handler(CommandHandler('help', self.cmd_help))

    def create_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û–±–º–µ–Ω'"""
        keyboard = [[InlineKeyboardButton("–û–ë–ú–ï–ù", url="https://telegra.ph/Obmen-11-06-2")]]
        return InlineKeyboardMarkup(keyboard)

    def get_cached_rate(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –ø–∞—Ä—Å–∏—Ç –∑–∞–Ω–æ–≤–æ"""
        now = time.time()
        
        # –í—Å–µ–≥–¥–∞ –ø–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π –∫—É—Ä—Å, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if now - self.last_update_time < self.cache_ttl:
            logger.info("–ö–µ—à –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ –ø–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        
        text = parse_exchange_rate(self.urls, self.keywords)
        self.last_rates = text
        self.last_update_time = now
        return text

    def cmd_start(self, update: Update, context: CallbackContext):
        user = update.effective_user
        if user:
            logger.info(f"/start –æ—Ç {user.id} @{user.username}")
            user_id = str(user.id)

            if user_id not in self.users:
                self.users[user_id] = {
                    'id': user.id,
                    'username': user.username or '',
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                    'registration_date': datetime.now().isoformat(),
                    'last_activity': datetime.now().isoformat()
                }
                save_users(self.users)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            else:
                self.users[user_id]['last_activity'] = datetime.now().isoformat()
                self.users[user_id]['username'] = user.username or ''
                self.users[user_id]['first_name'] = user.first_name or ''
                self.users[user_id]['last_name'] = user.last_name or ''
                save_users(self.users)

        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /get_rate"
        )

    def cmd_get_rate(self, update: Update, context: CallbackContext):
        user = update.effective_user
        if not user:
            return
        user_id = str(user.id)

        if user_id in self.users:
            self.users[user_id]['last_activity'] = datetime.now().isoformat()
            save_users(self.users)

        text = self.get_cached_rate()
        keyboard = self.create_keyboard()

        update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

    def cmd_help(self, update: Update, context: CallbackContext):
        help_text = (
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            "/get_rate ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT\n"
            "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
            "üõ† –ê–¥–º–∏–Ω:\n"
            "/setinterval <—Å–µ–∫> ‚Äî –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        update.message.reply_text(help_text)

    def cmd_setinterval(self, update: Update, context: CallbackContext):
        args = context.args
        if not args:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval <—Å–µ–∫—É–Ω–¥>")
            return
        try:
            interval = int(args[0])
            if interval < 60:
                update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥.")
                return
            self.sleep_time = interval
            update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫.")
            logger.info(f"–ê–¥–º–∏–Ω –∏–∑–º–µ–Ω–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
        except ValueError:
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    def cmd_users(self, update: Update, context: CallbackContext):
        if not self.users:
            update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        msg = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for uid, data in self.users.items():
            username = data.get('username', '')
            first_name = data.get('first_name', '')
            last_name = data.get('last_name', '')
            reg_date = data.get('registration_date', '')
            msg += f"{uid} @{username} {first_name} {last_name} ({reg_date})\n"
        update.message.reply_text(msg)

    def find_last_bot_message(self):
        """–ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ"""
        if self.bot_message_id is not None:
            return self.bot_message_id

        try:
            bot = self.updater.bot
            chat = bot.get_chat(self.channel_id)

            if hasattr(chat, 'pinned_message') and chat.pinned_message:
                if (chat.pinned_message.from_user and
                    chat.pinned_message.from_user.id == bot.get_me().id and
                    chat.pinned_message.message_thread_id == int(self.topic_id)):
                    self.bot_message_id = chat.pinned_message.message_id
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.bot_message_id}")
                    return self.bot_message_id
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    def send_or_edit_message(self, text):
        try:
            bot = self.updater.bot
            keyboard = self.create_keyboard()
            last_message_id = self.find_last_bot_message()

            if last_message_id:
                try:
                    bot.edit_message_text(
                        chat_id=self.channel_id,
                        message_id=last_message_id,
                        text=text,
                        parse_mode="Markdown",
                        reply_markup=keyboard,
                        disable_web_page_preview=True
                    )
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                except Exception as edit_error:
                    if "Message is not modified" in str(edit_error):
                        logger.info("–ö—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {edit_error}")
                        self.bot_message_id = None
            else:
                message = bot.send_message(
                    chat_id=self.channel_id,
                    text=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                    disable_web_page_preview=True,
                    message_thread_id=int(self.topic_id)
                )
                self.bot_message_id = message.message_id
                try:
                    bot.pin_chat_message(
                        chat_id=self.channel_id,
                        message_id=message.message_id
                    )
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.")
                except Exception as pin_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å: {pin_error}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    def periodic_send(self):
        while True:
            try:
                if not self.channel_id or not self.topic_id:
                    logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω channel_id –∏–ª–∏ topic_id.")
                else:
                    text = self.get_cached_rate()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å: {text}")
                    self.send_or_edit_message(text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_send: {e}")
            time.sleep(self.sleep_time)

    def run(self):
        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ run()")
        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ run()")

        self.thread.start()
        logger.info("üîÅ –ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.")

        self.updater.start_polling()
        logger.info("üì° –ë–æ—Ç –Ω–∞—á–∞–ª polling.")
        self.updater.idle()
        logger.info("üõë polling –∑–∞–≤–µ—Ä—à—ë–Ω.")

if __name__ == '__main__':
    print("üì¶ –ó–∞–ø—É—Å–∫ CurrencyBot...")
    lock_created = False
    try:
        create_lock()
        lock_created = True
        bot = CurrencyBot()
        print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω. –ó–∞–ø—É—Å–∫...")
        bot.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        if lock_created:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ lock-—Ñ–∞–π–ª–∞")
            remove_lock()
