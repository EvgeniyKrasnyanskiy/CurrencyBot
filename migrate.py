#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ CurrencyBot –Ω–∞ –Ω–æ–≤—É—é
"""

import json
import os
import shutil
import sys
from datetime import datetime
from pathlib import Path

def backup_old_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backup_{timestamp}"
    
    print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ {backup_dir}...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
    os.makedirs(backup_dir, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_to_backup = [
        'currency_bot.py',
        'data/users.json',
        'data/config.json',
        '.env'
    ]
    
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            shutil.copy2(file_path, backup_dir)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {file_path}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏
    if os.path.exists('logs'):
        shutil.copytree('logs', f"{backup_dir}/logs")
        print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–≥–∏")
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
    return backup_dir

def migrate_users_data():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    old_users_file = 'data/users.json'
    new_users_file = 'data/users_migrated.json'
    
    if not os.path.exists(old_users_file):
        print("‚ö†Ô∏è –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é")
        return
    
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        with open(old_users_file, 'r', encoding='utf-8-sig') as f:
            old_users = json.load(f)
        
        new_users = {}
        
        for user_id, user_data in old_users.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            new_user_data = {
                'id': int(user_id),
                'username': user_data.get('username', ''),
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', ''),
                'registration_date': user_data.get('registration_date', datetime.now().isoformat()),
                'last_activity': user_data.get('last_activity', datetime.now().isoformat()),
                'is_active': True,
                'command_count': 0,
                'last_command': ''
            }
            new_users[user_id] = new_user_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        with open(new_users_file, 'w', encoding='utf-8') as f:
            json.dump(new_users, f, indent=4, ensure_ascii=False)
        
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(new_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        shutil.move(old_users_file, f"{old_users_file}.old")
        shutil.move(new_users_file, old_users_file)
        
        print("‚úÖ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def migrate_config():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    old_config_file = 'data/config.json'
    
    if not os.path.exists(old_config_file):
        print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
        create_default_config()
        return
    
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open(old_config_file, 'r', encoding='utf-8') as f:
            old_config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        new_config = {
            'urls': old_config.get('urls', [
                "https://www.okx.com/ru-eu/convert/usdt-to-rub",
                "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
            ]),
            'keywords': old_config.get('keywords', [
                "–°–µ–π—á–∞—Å USDT = ",
                "USDT/RUB"
            ])
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(old_config_file, 'w', encoding='utf-8') as f:
            json.dump(new_config, f, indent=4, ensure_ascii=False)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def create_default_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_config = {
        'urls': [
            "https://www.okx.com/ru-eu/convert/usdt-to-rub",
            "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
        ],
        'keywords': [
            "–°–µ–π—á–∞—Å USDT = ",
            "USDT/RUB"
        ]
    }
    
    os.makedirs('data', exist_ok=True)
    
    with open('data/config.json', 'w', encoding='utf-8') as f:
        json.dump(default_config, f, indent=4, ensure_ascii=False)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = [
        'logs',
        'data',
        'tests',
        'monitoring'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def create_env_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞"""
    env_template = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CurrencyBot
BOT_TOKEN=your_bot_token_here
CHANNEL_ID=@your_channel_here
TOPIC_ID=123456789
ADMINS=["123456789"]
SLEEP_TIME=600
CACHE_TTL=300
"""
    
    if not os.path.exists('.env'):
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_template)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞")
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import requests
        import telegram
        import psutil
        import prometheus_client
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ CurrencyBot...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_dir = backup_old_data()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    migrate_users_data()
    migrate_config()
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    create_env_template()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies()
    
    print("=" * 50)
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –±–æ—Ç: python modern_bot.py")
    print("4. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker: docker-compose up -d")
    print("\nüîÑ –°—Ç–∞—Ä—ã–π –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ currency_bot.py (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1) 