import re
import json
import requests
import logging
import time
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from bs4 import BeautifulSoup
from abc import ABC, abstractmethod

logger = logging.getLogger(__name__)

@dataclass
class ExchangeRate:
    """–ú–æ–¥–µ–ª—å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    source: str
    rate: float
    timestamp: float
    url: str
    raw_data: str = ""

class ExchangeRateParser(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –∫—É—Ä—Å–æ–≤"""
    
    @abstractmethod
    def can_parse(self, url: str, content_type: str, html: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"""
        pass
    
    @abstractmethod
    def parse(self, url: str, response: requests.Response) -> Optional[ExchangeRate]:
        """–ü–∞—Ä—Å–∏—Ç –∫—É—Ä—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        pass

class CoinGeckoParser(ExchangeRateParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è CoinGecko API"""
    
    def can_parse(self, url: str, content_type: str, html: str) -> bool:
        return "coingecko.com" in url and "application/json" in content_type
    
    def parse(self, url: str, response: requests.Response) -> Optional[ExchangeRate]:
        try:
            data = response.json()
            if "tether" in data and "rub" in data["tether"]:
                rate = float(data["tether"]["rub"])
                return ExchangeRate(
                    source="CoinGecko",
                    rate=rate,
                    timestamp=time.time(),
                    url=url,
                    raw_data=response.text
                )
        except (json.JSONDecodeError, KeyError, ValueError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CoinGecko {url}: {e}")
        return None

class OKXParser(ExchangeRateParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è OKX"""
    
    def can_parse(self, url: str, content_type: str, html: str) -> bool:
        return "okx.com" in url
    
    def parse(self, url: str, response: requests.Response) -> Optional[ExchangeRate]:
        try:
            html = response.text
            patterns = [
                r'‚ÇΩ\s*(\d+[.,]?\d*)',
                r'(\d+[.,]?\d*)\s*‚ÇΩ',
                r'USDT.*?(\d+[.,]?\d*)\s*RUB',
                r'RUB.*?(\d+[.,]?\d*)\s*USDT'
            ]
            
            found_rates = []
            for pattern in patterns:
                matches = re.findall(pattern, html, re.IGNORECASE)
                for match in matches:
                    try:
                        number = float(match.replace(",", "."))
                        if 70 < number < 85:  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑—É–º–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                            found_rates.append(number)
                    except ValueError:
                        continue
            
            if found_rates:
                avg_rate = sum(found_rates) / len(found_rates)
                return ExchangeRate(
                    source="OKX",
                    rate=avg_rate,
                    timestamp=time.time(),
                    url=url,
                    raw_data=response.text
                )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OKX {url}: {e}")
        return None

class GenericParser(ExchangeRateParser):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self, keywords: List[str]):
        self.keywords = keywords
    
    def can_parse(self, url: str, content_type: str, html: str) -> bool:
        return True  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    
    def parse(self, url: str, response: requests.Response) -> Optional[ExchangeRate]:
        try:
            html = response.text
            domain = url.split("//")[1].split("/")[0]
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for keyword in self.keywords:
                pattern = re.compile(
                    rf'{re.escape(keyword)}[\s:<>\-/a-zA-Z"\'=]*?(\d+[.,]?\d*)',
                    re.IGNORECASE
                )
                match = pattern.search(html)
                if match:
                    rate = float(match.group(1).replace(",", "."))
                    return ExchangeRate(
                        source=domain,
                        rate=rate,
                        timestamp=time.time(),
                        url=url,
                        raw_data=response.text
                    )
            
            # Fallback –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É ‚ÇΩ
            soup = BeautifulSoup(html, 'html.parser')
            candidates = soup.find_all(string=re.compile(r'‚ÇΩ\s*\d+[.,]?\d*'))
            for s in candidates:
                match = re.search(r'‚ÇΩ\s*(\d+[.,]?\d*)', s)
                if match:
                    number = float(match.group(1).replace(",", "."))
                    if number > 20:
                        return ExchangeRate(
                            source=domain,
                            rate=number,
                            timestamp=time.time(),
                            url=url,
                            raw_data=response.text
                        )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
        return None

class ExchangeRateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç"""
    
    def __init__(self, urls: List[str], keywords: List[str], headers: Dict[str, str] = None):
        self.urls = urls
        self.keywords = keywords
        self.headers = headers or {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        self.parsers = [
            CoinGeckoParser(),
            OKXParser(),
            GenericParser(keywords)
        ]
    
    def fetch_rates(self) -> List[ExchangeRate]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        rates = []
        
        for url in self.urls:
            try:
                response = requests.get(url, headers=self.headers, timeout=10)
                response.raise_for_status()
                
                content_type = response.headers.get("Content-Type", "")
                html = response.text
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä
                for parser in self.parsers:
                    if parser.can_parse(url, content_type, html):
                        rate = parser.parse(url, response)
                        if rate:
                            rates.append(rate)
                            break
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
                    
            except requests.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        
        return rates
    
    def format_message(self, rates: List[ExchangeRate]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—É—Ä—Å—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not rates:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for rate in rates:
            if rate.source not in sources:
                sources[rate.source] = []
            sources[rate.source].append(rate)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = []
        timestamp = time.strftime("%H:%M", time.localtime())
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        priority_sources = ["CoinGecko", "OKX"]
        priority_rates = []
        
        for source in priority_sources:
            if source in sources:
                avg_rate = sum(r.rate for r in sources[source]) / len(sources[source])
                priority_rates.append((source, avg_rate, sources[source][0].url))
        
        if len(priority_rates) >= 2:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –¥–≤—É–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            cg_rate, okx_rate = None, None
            cg_url, okx_url = "", ""
            
            for source, rate, url in priority_rates:
                if source == "CoinGecko":
                    cg_rate = rate
                    cg_url = url
                elif source == "OKX":
                    okx_rate = rate
                    okx_url = url
            
            if cg_rate and okx_rate:
                cg_url_escaped = cg_url.replace("(", "\\(").replace(")", "\\)")
                okx_url_escaped = okx_url.replace("(", "\\(").replace(")", "\\)")
                return f"üíµ USDT = ‚ÇΩ{cg_rate:.2f} ([CG]({cg_url_escaped})) –∏ ‚ÇΩ{okx_rate:.2f} ([OKX]({okx_url_escaped})) {timestamp}"
        
        # Fallback - –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        for source, rate_list in sources.items():
            avg_rate = sum(r.rate for r in rate_list) / len(rate_list)
            lines.append(f"üí± {source}: {avg_rate:.2f}‚ÇΩ")
        
        lines.append(timestamp)
        return "\n".join(lines)
    
    def get_cached_rate(self, cache_ttl: int = 300) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if hasattr(self, '_last_rates') and hasattr(self, '_last_update_time'):
            if current_time - self._last_update_time < cache_ttl:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                base_text = self._last_rates.split(' ')
                if len(base_text) >= 4:
                    new_text = ' '.join(base_text[:-1]) + ' ' + time.strftime("%H:%M", time.localtime())
                    return new_text
                return self._last_rates
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
        rates = self.fetch_rates()
        message = self.format_message(rates)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        self._last_rates = message
        self._last_update_time = current_time
        
        return message 