import time
import logging
import psutil
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass
from prometheus_client import Counter, Gauge, Histogram, start_http_server

logger = logging.getLogger(__name__)

@dataclass
class BotMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞"""
    uptime_seconds: float
    memory_usage_mb: float
    cpu_usage_percent: float
    total_commands: int
    successful_requests: int
    failed_requests: int
    active_users: int
    total_users: int

class MonitoringService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, port: int = 8000):
        self.start_time = time.time()
        self.port = port
        
        # Prometheus –º–µ—Ç—Ä–∏–∫–∏
        self.command_counter = Counter('bot_commands_total', 'Total bot commands', ['command'])
        self.request_duration = Histogram('exchange_request_duration_seconds', 'Exchange request duration')
        self.active_users_gauge = Gauge('bot_active_users', 'Number of active users')
        self.total_users_gauge = Gauge('bot_total_users', 'Total number of users')
        self.memory_gauge = Gauge('bot_memory_usage_mb', 'Memory usage in MB')
        self.cpu_gauge = Gauge('bot_cpu_usage_percent', 'CPU usage percentage')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'commands': {},
            'requests': {'success': 0, 'failed': 0},
            'start_time': self.start_time
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫
        try:
            start_http_server(port)
            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫: {e}")
    
    def record_command(self, command: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.command_counter.labels(command=command).inc()
        
        if command not in self.stats['commands']:
            self.stats['commands'][command] = 0
        self.stats['commands'][command] += 1
        
        logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {command}")
    
    def record_request(self, success: bool, duration: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        self.request_duration.observe(duration)
        
        if success:
            self.stats['requests']['success'] += 1
        else:
            self.stats['requests']['failed'] += 1
    
    def update_user_metrics(self, active_users: int, total_users: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.active_users_gauge.set(active_users)
        self.total_users_gauge.set(total_users)
    
    def update_system_metrics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            process = psutil.Process(os.getpid())
            memory_mb = process.memory_info().rss / 1024 / 1024
            cpu_percent = process.cpu_percent()
            
            self.memory_gauge.set(memory_mb)
            self.cpu_gauge.set(cpu_percent)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    def get_uptime(self) -> timedelta:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        return timedelta(seconds=time.time() - self.start_time)
    
    def get_system_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            process = psutil.Process(os.getpid())
            memory_mb = process.memory_info().rss / 1024 / 1024
            cpu_percent = process.cpu_percent()
            
            return {
                'memory_mb': round(memory_mb, 2),
                'cpu_percent': round(cpu_percent, 2),
                'uptime': str(self.get_uptime()),
                'threads': process.num_threads(),
                'open_files': len(process.open_files()),
                'connections': len(process.connections())
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    def get_bot_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        uptime = self.get_uptime()
        
        return {
            'uptime': str(uptime),
            'uptime_seconds': time.time() - self.start_time,
            'commands': self.stats['commands'],
            'requests': self.stats['requests'],
            'total_commands': sum(self.stats['commands'].values()),
            'success_rate': (
                self.stats['requests']['success'] / 
                (self.stats['requests']['success'] + self.stats['requests']['failed'])
                if (self.stats['requests']['success'] + self.stats['requests']['failed']) > 0
                else 0
            )
        }
    
    def format_metrics_report(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–µ—Ç—Ä–∏–∫–∞—Ö"""
        system_info = self.get_system_info()
        bot_stats = self.get_bot_stats()
        
        report = "üìä –û—Ç—á–µ—Ç –æ –º–µ—Ç—Ä–∏–∫–∞—Ö –±–æ—Ç–∞:\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report += "üñ• –°–∏—Å—Ç–µ–º–∞:\n"
        report += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime']}\n"
        report += f"üíæ –ü–∞–º—è—Ç—å: {system_info.get('memory_mb', 0)} –ú–ë\n"
        report += f"üñ• CPU: {system_info.get('cpu_percent', 0)}%\n"
        report += f"üßµ –ü–æ—Ç–æ–∫–∏: {system_info.get('threads', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        report += "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
        for command, count in sorted(bot_stats['commands'].items(), key=lambda x: x[1], reverse=True):
            report += f"‚Ä¢ /{command}: {count}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        requests = bot_stats['requests']
        total_requests = requests['success'] + requests['failed']
        if total_requests > 0:
            success_rate = (requests['success'] / total_requests) * 100
            report += f"\nüåê –ó–∞–ø—Ä–æ—Å—ã:\n"
            report += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {requests['success']}\n"
            report += f"‚ùå –û—à–∏–±–æ–∫: {requests['failed']}\n"
            report += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
        
        return report

class HealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    
    def __init__(self, monitoring: MonitoringService):
        self.monitoring = monitoring
        self.last_check = time.time()
        self.health_status = "healthy"
        self.issues = []
    
    def check_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞"""
        current_time = time.time()
        self.issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        uptime = current_time - self.monitoring.start_time
        if uptime < 60:  # –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
            self.issues.append("–ë–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        system_info = self.monitoring.get_system_info()
        memory_mb = system_info.get('memory_mb', 0)
        if memory_mb > 500:  # –ë–æ–ª—å—à–µ 500 –ú–ë
            self.issues.append(f"–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} –ú–ë")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        cpu_percent = system_info.get('cpu_percent', 0)
        if cpu_percent > 80:  # –ë–æ–ª—å—à–µ 80%
            self.issues.append(f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        bot_stats = self.monitoring.get_bot_stats()
        success_rate = bot_stats.get('success_rate', 1.0)
        if success_rate < 0.8:  # –ú–µ–Ω—å—à–µ 80%
            self.issues.append(f"–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {success_rate*100:.1f}%")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if not self.issues:
            self.health_status = "healthy"
        elif len(self.issues) <= 2:
            self.health_status = "warning"
        else:
            self.health_status = "critical"
        
        self.last_check = current_time
        
        return {
            'status': self.health_status,
            'issues': self.issues,
            'last_check': datetime.fromtimestamp(current_time).isoformat()
        }
    
    def get_health_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        return {
            'healthy': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'critical': '‚ùå'
        }.get(self.health_status, '‚ùì')
    
    def format_health_report(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ"""
        health = self.check_health()
        
        report = f"{self.get_health_emoji()} –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health['status'].upper()}\n\n"
        
        if health['issues']:
            report += "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
            for issue in health['issues']:
                report += f"‚Ä¢ {issue}\n"
        else:
            report += "üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n"
        
        report += f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {health['last_check']}"
        
        return report 