import asyncio
import logging
import os
import sys
import time
from typing import Optional
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    CallbackContext, filters
)
from telegram.error import TelegramError

from config import ConfigManager
from exchange_rates import ExchangeRateService
from user_manager import UserManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(
    filename='logs/currency_bot.log',
    filemode='a',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

class ModernCurrencyBot:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è CurrencyBot —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.config_manager.validate()
        
        self.bot_config = self.config_manager.bot_config
        self.exchange_config = self.config_manager.exchange_config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.exchange_service = ExchangeRateService(
            urls=self.exchange_config.urls,
            keywords=self.exchange_config.keywords,
            headers=self.exchange_config.headers
        )
        self.user_manager = UserManager()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.last_message_id: Optional[int] = None
        self.is_running = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.bot_config.token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.cmd_start))
        self.application.add_handler(CommandHandler("get_rate", self.cmd_get_rate))
        self.application.add_handler(CommandHandler("help", self.cmd_help))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        admin_filter = filters.User(user_ids=self.bot_config.admins)
        self.application.add_handler(
            CommandHandler("setinterval", self.cmd_setinterval, filters=admin_filter)
        )
        self.application.add_handler(
            CommandHandler("users", self.cmd_users, filters=admin_filter)
        )
        self.application.add_handler(
            CommandHandler("stats", self.cmd_stats, filters=admin_filter)
        )
        self.application.add_handler(
            CommandHandler("cleanup", self.cmd_cleanup, filters=admin_filter)
        )
    
    def create_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üí± –û–±–º–µ–Ω", url="https://telegra.ph/Obmen-11-06-2")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if not user:
            return
        
        logger.info(f"/start –æ—Ç {user.id} @{user.username}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_manager.register_user(user)
        self.user_manager.update_activity(user.id, "start")
        
        welcome_text = (
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CurrencyBot!\n\n"
            "üí± –ü–æ–ª—É—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã USDT/RUB\n"
            "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/get_rate ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
            "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /get_rate"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def cmd_get_rate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_rate"""
        user = update.effective_user
        if not user:
            return
        
        self.user_manager.update_activity(user.id, "get_rate")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
            rate_text = self.exchange_service.get_cached_rate(self.bot_config.cache_ttl)
            keyboard = self.create_keyboard()
            
            await update.message.reply_text(
                rate_text,
                parse_mode="Markdown",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üîπ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "üîπ /get_rate ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT/RUB\n"
            "üîπ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üõ† –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üîπ /setinterval <—Å–µ–∫> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "üîπ /users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üîπ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "üîπ /cleanup ‚Äî –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å –∫–∞–∂–¥—ã–µ "
            f"{self.bot_config.sleep_time // 60} –º–∏–Ω—É—Ç"
        )
        
        await update.message.reply_text(help_text)
    
    async def cmd_setinterval(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setinterval (–∞–¥–º–∏–Ω)"""
        args = context.args
        if not args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval <—Å–µ–∫—É–Ω–¥>\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 60 —Å–µ–∫—É–Ω–¥"
            )
            return
        
        try:
            interval = int(args[0])
            if interval < 60:
                await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥")
                return
            
            self.bot_config.sleep_time = interval
            await update.message.reply_text(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫. "
                f"({interval // 60} –º–∏–Ω.)"
            )
            logger.info(f"–ê–¥–º–∏–Ω –∏–∑–º–µ–Ω–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    async def cmd_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (–∞–¥–º–∏–Ω)"""
        if not self.user_manager.users:
            await update.message.reply_text("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user_id, user_data in list(self.user_manager.users.items())[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            name = user_data.first_name or user_data.username or f"User{user_data.id}"
            reg_date = datetime.fromisoformat(user_data.registration_date).strftime("%d.%m.%Y")
            users_text += f"‚Ä¢ {name} (ID: {user_id})\n"
            users_text += f"  üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
            users_text += f"  üìä –ö–æ–º–∞–Ω–¥: {user_data.command_count}\n\n"
        
        if len(self.user_manager.users) > 20:
            users_text += f"... –∏ –µ—â–µ {len(self.user_manager.users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(users_text)
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (–∞–¥–º–∏–Ω)"""
        stats_text = self.user_manager.get_users_summary()
        await update.message.reply_text(stats_text)
    
    async def cmd_cleanup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup (–∞–¥–º–∏–Ω)"""
        removed_count = self.user_manager.cleanup_inactive_users()
        await update.message.reply_text(
            f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {removed_count}"
        )
    
    async def find_last_bot_message(self) -> Optional[int]:
        """–ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        if self.last_message_id:
            return self.last_message_id
        
        try:
            chat = await self.application.bot.get_chat(self.bot_config.channel_id)
            
            if hasattr(chat, 'pinned_message') and chat.pinned_message:
                if (chat.pinned_message.from_user and
                    chat.pinned_message.from_user.id == (await self.application.bot.get_me()).id):
                    self.last_message_id = chat.pinned_message.message_id
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.last_message_id}")
                    return self.last_message_id
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def send_or_edit_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            keyboard = self.create_keyboard()
            last_message_id = await self.find_last_bot_message()
            
            if last_message_id:
                try:
                    await self.application.bot.edit_message_text(
                        chat_id=self.bot_config.channel_id,
                        message_id=last_message_id,
                        text=text,
                        parse_mode="Markdown",
                        reply_markup=keyboard,
                        disable_web_page_preview=True
                    )
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except TelegramError as e:
                    if "Message is not modified" in str(e):
                        logger.info("–ö—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                        self.last_message_id = None
            else:
                message = await self.application.bot.send_message(
                    chat_id=self.bot_config.channel_id,
                    text=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                    disable_web_page_preview=True,
                    message_thread_id=int(self.bot_config.topic_id) if self.bot_config.topic_id else None
                )
                self.last_message_id = message.message_id
                
                try:
                    await self.application.bot.pin_chat_message(
                        chat_id=self.bot_config.channel_id,
                        message_id=message.message_id
                    )
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ")
                except TelegramError as pin_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å: {pin_error}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    async def periodic_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
        while self.is_running:
            try:
                if not self.bot_config.channel_id:
                    logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω CHANNEL_ID")
                else:
                    text = self.exchange_service.get_cached_rate(self.bot_config.cache_ttl)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å: {text}")
                    await self.send_or_edit_message(text)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_update: {e}")
            
            await asyncio.sleep(self.bot_config.sleep_time)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ModernCurrencyBot")
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.periodic_update())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await self.application.updater.idle()
        finally:
            await self.application.stop()
            await self.application.shutdown()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        self.is_running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì¶ –ó–∞–ø—É—Å–∫ ModernCurrencyBot...")
    
    bot = ModernCurrencyBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        await bot.stop()

if __name__ == '__main__':
    asyncio.run(main()) 